# ============================================================================
# KUBERNETES DEPLOYMENT - COST-OPTIMIZED VIRTUAL VACATION
# ============================================================================
# This configuration prioritizes cost efficiency while maintaining functionality

apiVersion: v1
kind: Namespace
metadata:
  name: virtual-vacation

---
# ============================================================================
# CONFIGMAP - Non-sensitive configuration
# ============================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: vv-config
  namespace: virtual-vacation
data:
  NODE_ENV: "production"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  CONTAINER_FRONTEND_PORT: "3000"
  CONTAINER_BACKEND_PORT: "8000"
  DATABASE_NAME: "virtual_vacation"
  REDIS_DB: "0"

---
# ============================================================================
# SECRET - Sensitive data (create with kubectl create secret)
# ============================================================================
apiVersion: v1
kind: Secret
metadata:
  name: vv-secrets
  namespace: virtual-vacation
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  jwt-secret: K3pUOG0wSGpqempqY21VRWorUEdyZWh0dkJBUHZ1Z3BtWHErcGdqRWRYaE55MFd2bFJHSlg0K09kZkViY0R0c2Q=
  session-secret: MzRCbVNkeFIwc2JMUTRFUGNmdmJFMWw5RGhpNXI1RUdvK0t2THpwbkdrVVFxZW0zaGNUNXBYL0RvTEw5Y3lEcUZhNnk0QmNud3lJSnA3WGMzTlVBUVE9PQ==
  google-maps-api-key: QUl6YVN5QWlmbEt5UnRPOXgyUG1JenQtZXpuRU50a0VQT044WTRz
  openweather-api-key: NTI0ZDQ3MWFkNTgyMDhlMDM5MzgwNGUyNDFlODA1OGY=
  mapbox-access-token: cGsuZXlKMUlqb2lkR1Z0YVhSaGVXOWphR0Z5YkdWeklpd2lZU0k2SW1OdFpIaGhjM2x4WVRKbE9YZ3lhWEJ2YzJnNGRXRXlOVGtpZlEudXVJOTZOZ0ExVWNqc3BiUXVhYmtGUQ==

---
# ============================================================================
# POSTGRESQL DEPLOYMENT (Cost-effective managed database alternative)
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: virtual-vacation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: vv-config
              key: DATABASE_NAME
        - name: POSTGRES_USER
          value: "vacation_user"
        - name: POSTGRES_PASSWORD
          value: "vacation_pass"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vacation_user
            - -d
            - virtual_vacation
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - vacation_user
            - -d
            - virtual_vacation
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# ============================================================================
# REDIS DEPLOYMENT (Cost-effective caching)
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: virtual-vacation
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# ============================================================================
# BACKEND DEPLOYMENT
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: virtual-vacation
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: your-registry/virtual-vacation-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: vv-config
              key: NODE_ENV
        - name: DATABASE_URL
          value: "postgresql://vacation_user:vacation_pass@postgres:5432/virtual_vacation"
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: jwt-secret
        - name: SESSION_SECRET
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: session-secret
        - name: GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: google-maps-api-key
        - name: OPENWEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: openweather-api-key
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# ============================================================================
# FRONTEND DEPLOYMENT
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: virtual-vacation
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: your-registry/virtual-vacation-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: VITE_API_BASE_URL
          value: "http://backend:8000"
        - name: VITE_GOOGLE_MAPS_API_KEY
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: google-maps-api-key
        - name: VITE_OPENWEATHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: openweather-api-key
        - name: VITE_MAPBOX_ACCESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: vv-secrets
              key: mapbox-access-token
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# ============================================================================
# SERVICES
# ============================================================================
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: virtual-vacation
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: virtual-vacation
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: virtual-vacation
spec:
  selector:
    app: backend
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: virtual-vacation
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: LoadBalancer  # or use Ingress for cost savings

---
# ============================================================================
# PERSISTENT VOLUME CLAIMS
# ============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: virtual-vacation
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi  # Adjust based on needs
  storageClassName: gp2  # Use cost-effective storage class

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: virtual-vacation
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: gp2

---
# ============================================================================
# HORIZONTAL POD AUTOSCALER (Cost-aware scaling)
# ============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: virtual-vacation
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 1  # Scale down to save costs
  maxReplicas: 5  # Limit max replicas
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: virtual-vacation
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
