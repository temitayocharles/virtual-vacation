# ============================================================================
# DATABASE SERVICES - PostgreSQL & Redis
# ============================================================================

---
# POSTGRESQL STATEFULSET
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: database
    service: postgres
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: POSTGRES_PASSWORD
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
            - name: tmp-volume
              mountPath: /tmp
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - vacation_user
                - -d
                - virtual_vacation
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - vacation_user
                - -d
                - virtual_vacation
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            exec:
              command:
                - pg_isready
                - -U
                - vacation_user
                - -d
                - virtual_vacation
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 30
      volumes:
        - name: postgres-init
          configMap:
            name: postgres-init-config
        - name: tmp-volume
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        labels:
          app: virtual-vacation
          component: database
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 50Gi
        storageClassName: "standard"

---
# REDIS DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: cache
    service: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7.2-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          command:
            - redis-server
          args:
            - --appendonly
            - "yes"
            - --maxmemory
            - "512mb"
            - --maxmemory-policy
            - "allkeys-lru"
            - --tcp-keepalive
            - "300"
            - --timeout
            - "0"
            - --databases
            - "16"
            - --save
            - "900"
            - "1"
            - --save
            - "300"
            - "10"
            - --save
            - "60"
            - "10000"
          ports:
            - containerPort: 6379
              name: redis
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
        - name: redis-config
          configMap:
            name: redis-config

---
# POSTGRESQL SERVICE
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: database
    service: postgres
spec:
  selector:
    app: postgres
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
      protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# REDIS SERVICE
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: cache
    service: redis
spec:
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# POSTGRESQL CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: database
data:
  init.sql: |
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";

    -- Create indexes for better performance
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_cities_country_code ON cities(country_code);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_cities_coordinates ON cities USING gist (point(longitude, latitude));
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_cities_popularity ON cities(popularity_score DESC);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_favorites_user ON user_favorites(user_id);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_visits_user ON user_visits(user_id);
    CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_radio_stations_country ON radio_stations(country_code);

---
# REDIS CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: cache
data:
  redis.conf: |
    # Redis configuration for production
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    loglevel notice
    databases 16
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    slave-serve-stale-data yes
    slave-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    slave-priority 100
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    lua-time-limit 5000
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    latency-monitor-threshold 0
    notify-keyspace-events ""
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    hll-sparse-max-bytes 3000
    activerehashing yes
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit slave 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    hz 10
    aof-rewrite-incremental-fsync yes
