# ============================================================================
# BACKEND SERVICE - Node.js/Express API
# ============================================================================

---
# BACKEND DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: backend
    service: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        component: backend
        service: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: backend
          image: virtual-vacation-backend:latest
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          ports:
            - containerPort: 5000
              name: http
              protocol: TCP
          env:
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: NODE_ENV
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: PORT
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: REDIS_URL
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: JWT_SECRET
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: SESSION_SECRET
            - name: GOOGLE_MAPS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: GOOGLE_MAPS_API_KEY
            - name: OPENWEATHER_API_KEY
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: OPENWEATHER_API_KEY
            - name: UNSPLASH_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: UNSPLASH_ACCESS_KEY
            - name: FREESOUND_API_KEY
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: FREESOUND_API_KEY
            - name: SKETCHFAB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: SKETCHFAB_API_KEY
            - name: CORS_ORIGIN
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: CORS_ORIGIN
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: virtual-vacation-config
                  key: LOG_LEVEL
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: uploads-volume
              mountPath: /app/uploads
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /health
              port: 5000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: uploads-volume
          persistentVolumeClaim:
            claimName: uploads-pvc
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          command:
            - sh
            - -c
            - |
              until pg_isready -h postgres-service -p 5432 -U vacation_user; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
        - name: wait-for-redis
          image: redis:7.2-alpine
          command:
            - sh
            - -c
            - |
              until redis-cli -h redis-service ping | grep -q PONG; do
                echo "Waiting for Redis..."
                sleep 2
              done
              echo "Redis is ready!"

---
# BACKEND SERVICE
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: backend
    service: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  selector:
    app: backend
  ports:
    - name: http
      port: 80
      targetPort: 5000
      protocol: TCP
    - name: websocket
      port: 8080
      targetPort: 5000
      protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# BACKEND HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - type: Pods
      pods:
        metric:
          name: http_requests_per_second
        target:
          type: AverageValue
          averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60

---
# POD DISRUPTION BUDGET
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: backend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: backend
