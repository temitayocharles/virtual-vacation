# ============================================================================
# MONITORING & LOGGING - Prometheus, Grafana & Fluent Bit
# ============================================================================

---
# PROMETHEUS CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: virtual-vacation

    rule_files:
      - /etc/prometheus/alert_rules.yml

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
        metrics_path: /probe
        params:
          module: [http_2xx]
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (.+)
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: job
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)

  alert_rules.yml: |
    groups:
      - name: virtual-vacation
        rules:
          - alert: HighRequestLatency
            expr: http_request_duration_seconds{quantile="0.5"} > 0.5
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: "High request latency"
              description: "Request latency is {{ $value }}s for {{ $labels.job }}"

          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "High error rate"
              description: "Error rate is {{ $value }} for {{ $labels.job }}"

          - alert: PodRestart
            expr: rate(kube_pod_container_status_restarts_total[5m]) > 0
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "Pod restart detected"
              description: "Pod {{ $labels.pod }} restarted {{ $value }} times"

          - alert: HighMemoryUsage
            expr: (1 - rate(node_memory_MemAvailable_bytes[5m]) / rate(node_memory_MemTotal_bytes[5m])) > 0.9
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage"
              description: "Memory usage is {{ $value | humanizePercentage }}"

          - alert: HighCPUUsage
            expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage"
              description: "CPU usage is {{ $value | humanizePercentage }}"

---
# PROMETHEUS DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
    service: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        service: prometheus
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --storage.tsdb.retention.time=200h
            - --web.enable-lifecycle
            - --web.enable-admin-api
          ports:
            - containerPort: 9090
              name: http
              protocol: TCP
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
# GRAFANA CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
data:
  grafana.ini: |
    [server]
    http_port = 3000
    domain = grafana.virtual-vacation.local

    [security]
    admin_user = admin
    admin_password = changeme123
    secret_key = SW2YcwTIb9zpOOhoPsMm

    [auth]
    disable_login_form = false
    disable_signout_menu = false

    [auth.anonymous]
    enabled = true
    org_name = Main Org.
    org_role = Viewer

    [database]
    type = sqlite3
    path = /var/lib/grafana/grafana.db

    [log]
    mode = console
    level = info

  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: 15s
          queryTimeout: 60s
          httpMethod: POST

  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'Virtual Vacation Dashboards'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# GRAFANA DASHBOARDS CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
data:
  system-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Virtual Vacation - System Overview",
        "tags": ["virtual-vacation", "system", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - ((node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {},
        "templating": {
          "list": []
        },
        "annotations": {
          "list": []
        },
        "refresh": "30s",
        "schemaVersion": 27,
        "version": 0,
        "links": []
      }
    }
  application-performance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Virtual Vacation - Application Performance",
        "tags": ["virtual-vacation", "application", "performance"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "HTTP Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{job=\"virtual-vacation-backend\"}[5m])",
                "legendFormat": "Requests/sec"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "timepicker": {},
        "templating": {
          "list": []
        },
        "annotations": {
          "list": []
        },
        "refresh": "30s",
        "schemaVersion": 27,
        "version": 0,
        "links": []
      }
    }

---
# GRAFANA DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
    service: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        service: grafana
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: virtual-vacation-secrets
                  key: GRAFANA_ADMIN_PASSWORD
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboard-files
              mountPath: /var/lib/grafana/dashboards
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-logs
              mountPath: /var/log/grafana
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-datasources
          configMap:
            name: grafana-config
            items:
              - key: datasources.yml
                path: datasources.yml
        - name: grafana-dashboards
          configMap:
            name: grafana-config
            items:
              - key: dashboards.yml
                path: dashboards.yml
        - name: grafana-dashboard-files
          configMap:
            name: grafana-dashboards
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-logs
          emptyDir: {}

---
# FLUENT BIT CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: logging
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf

    [INPUT]
        Name              tail
        Path              /var/log/containers/*virtual-vacation*.log
        Parser            docker
        Tag               kube.*
        Refresh_Interval  5
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On

    [INPUT]
        Name              systemd
        Tag               host.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Read_From_Tail    On

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude On

    [OUTPUT]
        Name  stdout
        Match *
        Format json_lines

  parsers.conf: |
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z

---
# FLUENT BIT DEPLOYMENT
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: logging
    service: fluent-bit
spec:
  selector:
    matchLabels:
      app: fluent-bit
  template:
    metadata:
      labels:
        app: fluent-bit
        component: logging
        service: fluent-bit
    spec:
      serviceAccountName: virtual-vacation-sa
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
        - name: fluent-bit
          image: fluent/fluent-bit:2.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: fluent-bit-config
              mountPath: /fluent-bit/etc
            - name: varlogcontainers
              mountPath: /var/log/containers
              readOnly: true
            - name: varlogpods
              mountPath: /var/log/pods
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "128Mi"
              cpu: "50m"
          livenessProbe:
            exec:
              command:
                - /fluent-bit/bin/fluent-bit
                - -c
                - /fluent-bit/etc/fluent-bit.conf
                - --dry-run
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /fluent-bit/bin/fluent-bit
                - -c
                - /fluent-bit/etc/fluent-bit.conf
                - --dry-run
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-config
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers

---
# MONITORING SERVICES
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
    service: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - name: http
      port: 9090
      targetPort: 9090
      protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
    service: grafana
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
# MONITORING PERSISTENT VOLUME CLAIMS
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: "standard"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: virtual-vacation
  labels:
    app: virtual-vacation
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: "standard"
