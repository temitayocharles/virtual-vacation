name: 🚀 Virtual Vacation - Comprehensive DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Target deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # 🔍 CODE QUALITY & SECURITY ANALYSIS
  # ============================================================================
  
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarQube

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci --no-audit --prefer-offline

      - name: 🧹 ESLint Analysis
        run: |
          cd ${{ matrix.component }}
          npm run lint -- --format=json --output-file=eslint-report.json || true

      - name: 🔍 TypeScript Type Checking
        if: matrix.component == 'frontend'
        run: |
          cd ${{ matrix.component }}
          npx tsc --noEmit --pretty false | tee typescript-report.txt || true

      - name: 📊 Generate Code Metrics
        run: |
          cd ${{ matrix.component }}
          npx --yes complexity-report src/ --output json > complexity-report.json || true
          find src/ -name "*.ts" -o -name "*.tsx" | xargs wc -l > lines-of-code.txt || true

      - name: 📤 Upload Code Quality Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-${{ matrix.component }}
          path: |
            ${{ matrix.component }}/eslint-report.json
            ${{ matrix.component }}/typescript-report.txt
            ${{ matrix.component }}/complexity-report.json
            ${{ matrix.component }}/lines-of-code.txt

  # ============================================================================
  # 🛡️ COMPREHENSIVE SECURITY SCANNING
  # ============================================================================
  
  security-scanning:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ========================================
      # 🔒 Secrets Detection with GitLeaks
      # ========================================
      - name: 🔒 GitLeaks Secret Scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .github/gitleaks.toml

      # ========================================
      # 🛡️ Trivy Vulnerability Scanning
      # ========================================
      - name: 🛡️ Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 🛡️ Trivy Config Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-config-results.json'

      # ========================================
      # ☁️ Checkov Infrastructure as Code Scan
      # ========================================
      - name: ☁️ Setup Python for Checkov
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ☁️ Install Checkov
        run: |
          python -m pip install --upgrade pip
          pip install checkov

      - name: ☁️ Run Checkov Scan
        run: |
          checkov -d . \
            --framework dockerfile,kubernetes,github_actions \
            --output json \
            --output-file checkov-report.json \
            --soft-fail
        continue-on-error: true

      # ========================================
      # 🔍 Semgrep Static Analysis
      # ========================================
      - name: 🔍 Semgrep Security Scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/javascript
            p/typescript
            p/react
            p/dockerfile
            p/kubernetes
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      # ========================================
      # 📊 Dependency Check (OWASP)
      # ========================================
      - name: 📊 OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Virtual Vacation'
          path: '.'
          format: 'JSON'
          out: 'dependency-check-reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}

      # ========================================
      # 📤 Upload Security Scan Results
      # ========================================
      - name: 📤 Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: 📤 Upload Security Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            trivy-*.sarif
            trivy-*.json
            checkov-report.json
            dependency-check-reports/

  # ============================================================================
  # 🧪 COMPREHENSIVE TESTING SUITE
  # ============================================================================
  
  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: virtual_vacation_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: 📦 Install Dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci --no-audit

      - name: 🏗️ Build Application
        run: |
          cd ${{ matrix.component }}
          npm run build
        env:
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          VITE_OPENWEATHER_API_KEY: ${{ secrets.VITE_OPENWEATHER_API_KEY }}
          VITE_MAPBOX_ACCESS_TOKEN: ${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

      - name: 🧪 Run Unit Tests
        run: |
          cd ${{ matrix.component }}
          npm run test -- --coverage --watchAll=false
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/virtual_vacation_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_for_ci
          SESSION_SECRET: test_session_secret_for_ci

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: codecov-${{ matrix.component }}

  # ============================================================================
  # 🔨 BUILD & CONTAINER SECURITY
  # ============================================================================
  
  build-and-scan:
    name: 🔨 Build & Container Security
    runs-on: ubuntu-latest
    needs: [code-quality, security-scanning, testing]
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-${{ matrix.component }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: 🏗️ Build Container Image (No Push)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          push: false
          tags: virtual-vacation-${{ matrix.component }}:scan
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
            VITE_OPENWEATHER_API_KEY=${{ secrets.VITE_OPENWEATHER_API_KEY }}
            VITE_MAPBOX_ACCESS_TOKEN=${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

      # ========================================
      # 🛡️ Container Security Scanning
      # ========================================
      - name: 🛡️ Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: virtual-vacation-${{ matrix.component }}:scan
          format: 'sarif'
          output: 'trivy-container-${{ matrix.component }}.sarif'

      - name: 🔍 Container Structure Test
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Create basic structure test
          cat > structure-test-${{ matrix.component }}.yaml << EOF
          schemaVersion: 2.0.0
          commandTests:
            - name: "Check Node.js version"
              command: "node"
              args: ["--version"]
              expectedOutput: ["v18\\."]
          fileExistenceTests:
            - name: "App files exist"
              path: "/app"
              shouldExist: true
          EOF
          
          # Run structure test
          container-structure-test test --image virtual-vacation-${{ matrix.component }}:scan --config structure-test-${{ matrix.component }}.yaml

      - name: 📤 Upload Container Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-security-${{ matrix.component }}
          path: |
            trivy-container-${{ matrix.component }}.sarif
            structure-test-${{ matrix.component }}.yaml

  # ============================================================================
  # ☕ SONARQUBE ANALYSIS WITH MAVEN
  # ============================================================================
  
  sonarqube-analysis:
    name: ☕ SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [testing]
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📁 Create Maven Structure
        run: |
          mkdir -p sonar-project
          cd sonar-project
          
          # Create pom.xml for SonarQube analysis
          cat > pom.xml << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                   http://maven.apache.org/xsd/maven-4.0.0.xsd">
              <modelVersion>4.0.0</modelVersion>
              
              <groupId>com.virtualvacation</groupId>
              <artifactId>virtual-vacation-analysis</artifactId>
              <version>1.0.0</version>
              <packaging>pom</packaging>
              
              <name>Virtual Vacation SonarQube Analysis</name>
              <description>SonarQube analysis for Virtual Vacation project</description>
              
              <properties>
                  <maven.compiler.source>17</maven.compiler.source>
                  <maven.compiler.target>17</maven.compiler.target>
                  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
                  <sonar.projectKey>virtual-vacation</sonar.projectKey>
                  <sonar.organization>virtual-vacation-org</sonar.organization>
                  <sonar.host.url>https://sonarcloud.io</sonar.host.url>
                  <sonar.sources>../frontend/src,../backend/src</sonar.sources>
                  <sonar.tests>../frontend/src,../backend/src</sonar.tests>
                  <sonar.test.inclusions>**/*.test.ts,**/*.test.tsx,**/*.spec.ts</sonar.test.inclusions>
                  <sonar.exclusions>**/node_modules/**,**/dist/**,**/build/**,**/*.test.ts,**/*.test.tsx,**/*.spec.ts</sonar.exclusions>
                  <sonar.typescript.lcov.reportPaths>../frontend/coverage/lcov.info,../backend/coverage/lcov.info</sonar.typescript.lcov.reportPaths>
                  <sonar.javascript.lcov.reportPaths>../frontend/coverage/lcov.info,../backend/coverage/lcov.info</sonar.javascript.lcov.reportPaths>
              </properties>
              
              <build>
                  <plugins>
                      <plugin>
                          <groupId>org.sonarsource.scanner.maven</groupId>
                          <artifactId>sonar-maven-plugin</artifactId>
                          <version>3.10.0.2594</version>
                      </plugin>
                  </plugins>
              </build>
          </project>
          EOF

      - name: 📦 Install Dependencies & Generate Coverage
        run: |
          # Frontend
          cd frontend
          npm ci --no-audit
          npm run test -- --coverage --watchAll=false || true
          cd ..
          
          # Backend
          cd backend
          npm ci --no-audit
          npm run test -- --coverage --watchAll=false || true
          cd ..

      - name: 📊 Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: 📊 Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: ☕ Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd sonar-project
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=virtual-vacation \
            -Dsonar.organization=virtual-vacation-org \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token=$SONAR_TOKEN

  # ============================================================================
  # 🚢 DOCKER REGISTRY DEPLOYMENT
  # ============================================================================
  
  docker-deploy:
    name: 🚢 Docker Registry Deployment
    runs-on: ubuntu-latest
    needs: [build-and-scan, sonarqube-analysis]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-${{ matrix.component }}
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: 🏗️ Build and Push Multi-Platform Images
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_GOOGLE_MAPS_API_KEY=${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
            VITE_OPENWEATHER_API_KEY=${{ secrets.VITE_OPENWEATHER_API_KEY }}
            VITE_MAPBOX_ACCESS_TOKEN=${{ secrets.VITE_MAPBOX_ACCESS_TOKEN }}

      # ========================================
      # 🛡️ Final Container Security Scan
      # ========================================
      - name: 🛡️ Final Trivy Scan on Pushed Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY_DOCKERHUB }}/${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-${{ matrix.component }}:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'

  # ============================================================================
  # 🧹 CLEANUP ON-DEMAND CONTAINERS
  # ============================================================================
  
  cleanup:
    name: 🧹 Cleanup Resources
    runs-on: ubuntu-latest
    needs: [docker-deploy]
    if: always()
    
    steps:
      - name: 🧹 Cleanup Docker Resources
        run: |
          # Remove dangling images
          docker image prune -f || true
          
          # Remove unused volumes
          docker volume prune -f || true
          
          # Remove unused networks
          docker network prune -f || true
          
          # Clean build cache
          docker builder prune -f || true

      - name: 📊 Resource Usage Report
        run: |
          echo "🔍 Final Resource Usage:"
          df -h
          docker system df || true

  # ============================================================================
  # 📊 REPORTING & NOTIFICATIONS
  # ============================================================================
  
  reporting:
    name: 📊 Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scanning, build-and-scan, sonarqube-analysis]
    if: always()
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Security Artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: 📊 Generate Security Summary
        run: |
          echo "# 🛡️ Virtual Vacation Security Report" > security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 🔍 Scan Results Summary" >> security-summary.md
          echo "- ✅ GitLeaks Secret Scanning: Completed" >> security-summary.md
          echo "- ✅ Trivy Vulnerability Scanning: Completed" >> security-summary.md
          echo "- ✅ Checkov IaC Scanning: Completed" >> security-summary.md
          echo "- ✅ OWASP Dependency Check: Completed" >> security-summary.md
          echo "- ✅ Container Security Testing: Completed" >> security-summary.md
          echo "- ✅ SonarQube Code Quality: Completed" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## 📈 Metrics" >> security-summary.md
          echo "- Commit SHA: ${{ github.sha }}" >> security-summary.md
          echo "- Branch: ${{ github.ref_name }}" >> security-summary.md
          echo "- Workflow Run: ${{ github.run_number }}" >> security-summary.md

      - name: 📤 Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: 💬 Post Security Summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # ============================================================================
  # 🚀 DEPLOYMENT ORCHESTRATION
  # ============================================================================
  
  deploy:
    name: 🚀 Deploy Application
    runs-on: ubuntu-latest
    needs: [docker-deploy]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: 📂 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Environment
        run: |
          echo "🚀 Deploying Virtual Vacation to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          echo "📦 Frontend Image: ${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-frontend:latest"
          echo "📦 Backend Image: ${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-backend:latest"
          
          # Here you would add your actual deployment commands
          # Examples:
          # - kubectl apply -f k8s-deployment.yaml
          # - docker-compose -f production-compose.yml up -d
          # - terraform apply
          # - ansible-playbook deploy.yml

      - name: 🏥 Health Check
        run: |
          echo "🏥 Running health checks..."
          # Add your health check commands here
          # curl -f https://your-app.com/health || exit 1

      - name: 📢 Deployment Notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            🚀 Virtual Vacation deployment ${{ job.status }}!
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Images deployed:
            - Frontend: ${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-frontend:latest
            - Backend: ${{ env.DOCKERHUB_USERNAME }}/virtual-vacation-backend:latest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
