version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: virtual-vacation-postgres
    environment:
      POSTGRES_DB: virtual_vacation
      POSTGRES_USER: vacation_user
      POSTGRES_PASSWORD: vacation_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/config/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vacation_user -d virtual_vacation"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - virtual-vacation-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: virtual-vacation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - virtual-vacation-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: virtual-vacation-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://vacation_user:vacation_password@postgres:5432/virtual_vacation
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-change-in-production
      SESSION_SECRET: dev-session-secret-change-in-production
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY:-dev_openweather_key}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-dev_google_maps_key}
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - virtual-vacation-network
    command: npm run dev

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: virtual-vacation-frontend
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:5000
      VITE_APP_TITLE: "Virtual Vacation - Development"
    ports:
      - "3000:80"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - virtual-vacation-network
    command: npm run dev

  # Media Gateway
  media-gateway:
    build:
      context: ./media-gateway
      dockerfile: Dockerfile
    container_name: virtual-vacation-media-gateway
    environment:
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://mongo:27017/media_db
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio_secret_key
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - mongo
      - minio
    volumes:
      - ./media-gateway:/app
    networks:
      - virtual-vacation-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # MongoDB for Media Gateway
  mongo:
    image: mongo:7-jammy
    container_name: virtual-vacation-mongo
    environment:
      MONGO_INITDB_DATABASE: media_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - virtual-vacation-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: virtual-vacation-minio
    environment:
      MINIO_ACCESS_KEY: minio_access_key
      MINIO_SECRET_KEY: minio_secret_key
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - virtual-vacation-network
    command: server /data --console-address ":9001"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: virtual-vacation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - virtual-vacation-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: virtual-vacation-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - virtual-vacation-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: virtual-vacation-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - virtual-vacation-network

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: virtual-vacation-postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://vacation_user:vacation_password@postgres:5432/virtual_vacation?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - virtual-vacation-network

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: virtual-vacation-redis-exporter
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ""
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - virtual-vacation-network

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  virtual-vacation-network:
    driver: bridge
