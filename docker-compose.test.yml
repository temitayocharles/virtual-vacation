version: '3.8'

services:
  # PostgreSQL Database for testing
  postgres:
    image: postgres:15-alpine
    container_name: virtual-vacation-postgres-test
    environment:
      POSTGRES_DB: virtual_vacation_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"  # Use different port to avoid conflicts
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./backend/src/config/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d virtual_vacation_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Redis Cache for testing
  redis:
    image: redis:7-alpine
    container_name: virtual-vacation-redis-test
    ports:
      - "6380:6379"  # Use different port to avoid conflicts
    volumes:
      - redis_test_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Backend API for testing
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: virtual-vacation-backend-test
    environment:
      NODE_ENV: test
      PORT: 5001
      DATABASE_URL: postgresql://test_user:test_password@postgres:5432/virtual_vacation_test
      TEST_DB_HOST: postgres
      TEST_DB_PORT: 5432
      TEST_DB_NAME: virtual_vacation_test
      TEST_DB_USER: test_user
      TEST_DB_PASSWORD: test_password
      REDIS_URL: redis://redis:6379
      TEST_REDIS_URL: redis://redis:6379
      JWT_SECRET: test-jwt-secret-for-integration-tests
      SESSION_SECRET: test-session-secret-for-integration-tests
      OPENWEATHER_API_KEY: test_openweather_key
      GOOGLE_MAPS_API_KEY: test_google_maps_key
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - test-network
    command: npm run dev

  # Prometheus for test monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: virtual-vacation-prometheus-test
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_test_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - test-network

  # Grafana for test monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: virtual-vacation-grafana-test
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3003:3000"
    volumes:
      - grafana_test_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - test-network

  # Node Exporter for test metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: virtual-vacation-node-exporter-test
    ports:
      - "9101:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - test-network

volumes:
  postgres_test_data:
  redis_test_data:
  prometheus_test_data:
  grafana_test_data:

networks:
  test-network:
    driver: bridge
